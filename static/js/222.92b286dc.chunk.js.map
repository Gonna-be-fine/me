{"version":3,"file":"static/js/222.92b286dc.chunk.js","mappings":"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M,EAAGhD,EAAI,GAExCgD,EAAKhD,EAAI,GAAK2E,EACd3B,EAAKhD,EAAI,GAAK4E,EACd5B,EAAKhD,EAAI,GAAK6E,EACd7B,EAAKhD,EAAI,GAAK2E,EACd3B,EAAKhD,EAAI,GAAK4E,EACd5B,EAAKhD,EAAI,GAAK6E,EAEdjG,KAAK0G,YAAY1F,SAAS8F,aAAc,EACxC9G,KAAK0G,YAAYvC,SAAS2C,aAAc,EACxC9G,KAAK0G,YAAYtC,KAAK0C,aAAc,CACtC,KAACtD,CAAA,CAxRkB,CAAS7D,EAAAA,gB,8BCF9BA,EAAAA,YAAkB4H,cAAgB,CAChC,GACA,oBACA,GACA5H,EAAAA,YAAkB6H,wBAClB7H,EAAAA,YAAkB8H,gBAClB,GACA,2BACA,uBACA,wBACA,yBACA,4BACA,GACA,2BACA,2BACA,sBACA,uBACA,uBACA,yBACA,iCACA,GACA,oBACA,uBACA,2BACA,GACA,qCACA,GACA,6BACA,uBACA,2BACA,kBACA,GACA,IACA,GACA,gBACA,GACA,kDACA,GACA,uCACA,uBACA,GACA,mDACA,sDACA,gDACA,4CACA,GACA,oDACA,2CACA,2CACA,GACA,mCACA,GACA,gBACA,mEACA,wEACA,aACA,qDACA,qDACA,0CACA,GACA,+CACA,8CACA,6EACA,GACA,QACA,GACA,2EACA,mDACA,2BACA,kCACA,oCACA,wCACA,6EACA,QACA,GACA,4CACA,GACA,mCACA,GACA9H,EAAAA,YAAkB+H,mBAClB/H,EAAAA,YAAkBgI,YAChB,iEACFhI,EAAAA,YAAkBgI,WAClB,KACAC,KAAK,MAEPjI,EAAAA,YAAkBkI,cAAgB,CAChC,GACAlI,EAAAA,YAAkBmI,kBAClBnI,EAAAA,YAAkBoI,0BAClB,GACA,yBACA,8BACA,wBACA,6BACA,yBACA,2BACA,4BACA,2BACA,4BACA,2BACA,uBACA,GACA,oBACA,uBACA,2BACA,GACA,gBACA,GACApI,EAAAA,YAAkBqI,qBAClB,GACA,uBACA,8DACA,4EACA,qCACA,2BACA,yFACA,QACA,wBACA,qDACA,GACArI,EAAAA,YAAk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","sources":["lib/meshline/meshline/raycast.js","lib/meshline/meshline/utils.js","lib/meshline/meshline/meshline.js","lib/meshline/meshline/material.js","screens/building/utils/geoUtil.js","screens/building/worker/worker.js"],"sourcesContent":["/* eslint-disable no-continue */\n/*\n * @Description:\n * @Autor: xjh\n * @Date: 2023-06-19 14:10:27\n * @LastEditors: cy\n * @LastEditTime: 2023-12-25 11:56:21\n */\n/* eslint-disable import/prefer-default-export */\nimport * as THREE from \"three\";\n\nexport function MeshLineRaycast(raycaster, intersects) {\n  const inverseMatrix = new THREE.Matrix4();\n  const ray = new THREE.Ray();\n  const sphere = new THREE.Sphere();\n  const interRay = new THREE.Vector3();\n  const { geometry } = this;\n  // Checking boundingSphere distance to ray\n\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n\n  if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n    return;\n  }\n\n  inverseMatrix.getInverse(this.matrixWorld);\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n  const vStart = new THREE.Vector3();\n  const vEnd = new THREE.Vector3();\n  const interSegment = new THREE.Vector3();\n  const step = this instanceof THREE.LineSegments ? 2 : 1;\n  const { index } = geometry;\n  const { attributes } = geometry;\n\n  if (index !== null) {\n    const indices = index.array;\n    const positions = attributes.position.array;\n    const widths = attributes.width.array;\n\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\n      const a = indices[i];\n      const b = indices[i + 1];\n\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      const width =\n        widths[Math.floor(i / 3)] !== undefined ? widths[Math.floor(i / 3)] : 1;\n      const precision =\n        raycaster.params.Line.threshold + (this.material.lineWidth * width) / 2;\n      const precisionSq = precision * precision;\n\n      const distSq = ray.distanceSqToSegment(\n        vStart,\n        vEnd,\n        interRay,\n        interSegment,\n      );\n\n      if (distSq > precisionSq) continue;\n\n      interRay.applyMatrix4(this.matrixWorld); // Move back to world space for distance calculation\n\n      const distance = raycaster.ray.origin.distanceTo(interRay);\n\n      if (distance < raycaster.near || distance > raycaster.far) continue;\n\n      intersects.push({\n        distance,\n        // What do we want? intersection point on the ray or on the segment??\n        // point: raycaster.ray.at( distance ),\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: null,\n        object: this,\n      });\n      // make event only fire once\n      i = l;\n    }\n  }\n}\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable no-param-reassign */\n/*\n * @Description:\n * @Autor: xjh\n * @Date: 2023-06-19 11:32:56\n * @LastEditors: xjh\n * @LastEditTime: 2023-06-19 11:45:49\n */\nexport default function memcpy(src, srcOffset, dst, dstOffset, length) {\n  let i;\n\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n\n  src = srcOffset\n    ? src.subarray\n      ? src.subarray(srcOffset, length && srcOffset + length)\n      : src.slice(srcOffset, length && srcOffset + length)\n    : src;\n\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i += 1) {\n      dst[i + dstOffset] = src[i];\n    }\n  }\n\n  return dst;\n}\n","/* eslint-disable import/prefer-default-export */\n\nimport * as THREE from \"three\";\nimport { MeshLineRaycast } from \"./raycast\";\nimport utils from \"./utils\";\n\nexport class MeshLine extends THREE.BufferGeometry {\n  constructor() {\n    super();\n    this.type = \"MeshLine\";\n    this.isMeshLine = true;\n    this.positions = [];\n    this.raycast = MeshLineRaycast;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    this.counters = [];\n    this._points = [];\n    this._geom = null;\n\n    this.widthCallback = null;\n\n    // Used to raycast\n    this.matrixWorld = new THREE.Matrix4();\n\n    Object.defineProperties(this, {\n      // this is now a bufferGeometry\n      // add getter to support previous api\n      geometry: {\n        enumerable: true,\n        get() {\n          return this;\n        },\n      },\n      geom: {\n        enumerable: true,\n        get() {\n          return this._geom;\n        },\n        set(value) {\n          this.setGeometry(value, this.widthCallback);\n        },\n      },\n      // for declaritive architectures\n      // to return the same value that sets the points\n      // eg. this.points = points\n      // console.log(this.points) -> points\n      points: {\n        enumerable: true,\n        get() {\n          return this._points;\n        },\n        set(value) {\n          this.setPoints(value, this.widthCallback);\n        },\n      },\n    });\n  }\n\n  setMatrixWorld(matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  }\n\n  // setting via a geometry is rather superfluous\n  // as you're creating a unecessary geometry just to throw away\n  // but exists to support previous api\n  setGeometry(g, c) {\n    // as the input geometry are mutated we store them\n    // for later retreival when necessary (declaritive architectures)\n    this._geometry = g;\n    if (g instanceof THREE.BufferGeometry) {\n      this.setPoints(g.getAttribute(\"position\").array, c);\n    } else {\n      this.setPoints(g, c);\n    }\n  }\n\n  setPoints(points, wcb) {\n    // if (!(points instanceof Float32Array) && !(points instanceof Array)) {\n    //   console.error('ERROR: The BufferArray of points is not instancied correctly.')\n    //   return\n    // }\n    // as the points are mutated we store them\n    // for later retreival when necessary (declaritive architectures)\n    this._points = points;\n    this.widthCallback = wcb;\n    this.positions = [];\n    this.counters = [];\n    if (points.length && points[0] instanceof THREE.Vector3) {\n      // could transform Vector3 array into the array used below\n      // but this approach will only loop through the array once\n      // and is more performant\n      for (let j = 0; j < points.length; j += 1) {\n        const p = points[j];\n        const c = j / points.length;\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      // eslint-disable-next-line no-redeclare\n      for (let j = 0; j < points.length; j += 3) {\n        // eslint-disable-next-line no-redeclare\n        const c = j / points.length;\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n    this.process();\n  }\n\n  compareV3(a, b) {\n    const aa = a * 6;\n    const ab = b * 6;\n    return (\n      this.positions[aa] === this.positions[ab] &&\n      this.positions[aa + 1] === this.positions[ab + 1] &&\n      this.positions[aa + 2] === this.positions[ab + 2]\n    );\n  }\n\n  copyV3(a) {\n    const aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  }\n\n  process() {\n    const l = this.positions.length / 6;\n\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n\n    let w;\n\n    let v;\n    // initial previous points\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n\n    for (let j = 0; j < l; j += 1) {\n      // sides\n      this.side.push(1);\n      this.side.push(-1);\n\n      // widths\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1));\n      else w = 1;\n      this.width.push(w);\n      this.width.push(w);\n\n      // uvs\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n\n      if (j < l - 1) {\n        // points previous to poisitions\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n\n        // indices\n        const n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      if (j > 0) {\n        // points after poisitions\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n\n    // last next point\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n\n    // redefining the attribute seems to prevent range errors\n    // if the user sets a differing number of vertices\n    if (\n      !this._attributes ||\n      this._attributes.position.count !== this.positions.length\n    ) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(\n          new Float32Array(this.positions),\n          3,\n        ),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(\n          new Uint16Array(this.indices_array),\n          1,\n        ),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1),\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.copyArray(new Float32Array(this.next));\n      this._attributes.next.needsUpdate = true;\n      this._attributes.side.copyArray(new Float32Array(this.side));\n      this._attributes.side.needsUpdate = true;\n      this._attributes.width.copyArray(new Float32Array(this.width));\n      this._attributes.width.needsUpdate = true;\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n      this._attributes.uv.needsUpdate = true;\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n      this._attributes.index.needsUpdate = true;\n    }\n\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n\n    this.setIndex(this._attributes.index);\n\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n\n  /**\n   * Fast method to advance the line by one position.  The oldest position is removed.\n   * @param position\n   */\n  advance({ x, y, z }) {\n    const positions = this._attributes.position.array;\n    const previous = this._attributes.previous.array;\n    const next = this._attributes.next.array;\n    const l = positions.length;\n\n    // PREVIOUS\n    utils.memcpy(positions, 0, previous, 0, l);\n\n    // POSITIONS\n    utils.memcpy(positions, 6, positions, 0, l - 6);\n\n    positions[l - 6] = x;\n    positions[l - 5] = y;\n    positions[l - 4] = z;\n    positions[l - 3] = x;\n    positions[l - 2] = y;\n    positions[l - 1] = z;\n\n    // NEXT\n    utils.memcpy(positions, 6, next, 0, l - 6);\n\n    next[l - 6] = x;\n    next[l - 5] = y;\n    next[l - 4] = z;\n    next[l - 3] = x;\n    next[l - 2] = y;\n    next[l - 1] = z;\n\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  }\n}\n","/* eslint-disable import/prefer-default-export */\n// import * as THREE from 'three';\nimport * as THREE from \"three\";\n\nTHREE.ShaderChunk.meshline_vert = [\n  \"\",\n  \"#include <common>\",\n  \"\",\n  THREE.ShaderChunk.logdepthbuf_pars_vertex,\n  THREE.ShaderChunk.fog_pars_vertex,\n  \"\",\n  \"attribute vec3 previous;\",\n  \"attribute vec3 next;\",\n  \"attribute float side;\",\n  \"attribute float width;\",\n  \"attribute float counters;\",\n  \"\",\n  \"uniform vec2 resolution;\",\n  \"uniform float lineWidth;\",\n  \"uniform vec3 color;\",\n  \"uniform vec2 offset;\",\n  \"uniform float speed;\",\n  \"uniform float opacity;\",\n  \"uniform float sizeAttenuation;\",\n  \"\",\n  \"varying vec2 vUV;\",\n  \"varying vec4 vColor;\",\n  \"varying float vCounters;\",\n  \"\",\n  \"vec2 fix( vec4 i, float aspect ) {\",\n  \"\",\n  \"    vec2 res = i.xy / i.w;\",\n  \"    res.x *= aspect;\",\n  \"\t vCounters = counters;\",\n  \"    return res;\",\n  \"\",\n  \"}\",\n  \"\",\n  \"void main() {\",\n  \"\",\n  \"    float aspect = resolution.x / resolution.y;\",\n  \"\",\n  \"    vColor = vec4( color, opacity );\",\n  \"    vUV = uv+offset;\",\n  \"\",\n  \"    mat4 m = projectionMatrix * modelViewMatrix;\",\n  \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\n  \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\n  \"    vec4 nextPos = m * vec4( next, 1.0 );\",\n  \"\",\n  \"    vec2 currentP = fix( finalPosition, aspect );\",\n  \"    vec2 prevP = fix( prevPos, aspect );\",\n  \"    vec2 nextP = fix( nextPos, aspect );\",\n  \"\",\n  \"    float w = lineWidth * width;\",\n  \"\",\n  \"    vec2 dir;\",\n  \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\n  \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\n  \"    else {\",\n  \"        vec2 dir1 = normalize( currentP - prevP );\",\n  \"        vec2 dir2 = normalize( nextP - currentP );\",\n  \"        dir = normalize( dir1 + dir2 );\",\n  \"\",\n  \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\n  \"        vec2 miter = vec2( -dir.y, dir.x );\",\n  \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\n  \"\",\n  \"    }\",\n  \"\",\n  \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\n  \"    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );\",\n  \"    normal.xy *= .5 * w;\",\n  \"    normal *= projectionMatrix;\",\n  \"    if( sizeAttenuation == 0. ) {\",\n  \"        normal.xy *= finalPosition.w;\",\n  \"        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;\",\n  \"    }\",\n  \"\",\n  \"    finalPosition.xy += normal.xy * side;\",\n  \"\",\n  \"    gl_Position = finalPosition;\",\n  \"\",\n  THREE.ShaderChunk.logdepthbuf_vertex,\n  THREE.ShaderChunk.fog_vertex &&\n    \"    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n  THREE.ShaderChunk.fog_vertex,\n  \"}\",\n].join(\"\\n\");\n\nTHREE.ShaderChunk.meshline_frag = [\n  \"\",\n  THREE.ShaderChunk.fog_pars_fragment,\n  THREE.ShaderChunk.logdepthbuf_pars_fragment,\n  \"\",\n  \"uniform sampler2D map;\",\n  \"uniform sampler2D alphaMap;\",\n  \"uniform float useMap;\",\n  \"uniform float useAlphaMap;\",\n  \"uniform float useDash;\",\n  \"uniform float dashArray;\",\n  \"uniform float dashOffset;\",\n  \"uniform float dashRatio;\",\n  \"uniform float visibility;\",\n  \"uniform float alphaTest;\",\n  \"uniform vec2 repeat;\",\n  \"\",\n  \"varying vec2 vUV;\",\n  \"varying vec4 vColor;\",\n  \"varying float vCounters;\",\n  \"\",\n  \"void main() {\",\n  \"\",\n  THREE.ShaderChunk.logdepthbuf_fragment,\n  \"\",\n  \"    vec4 c = vColor;\",\n  \"    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );\",\n  \"    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;\",\n  \"    if( c.a < alphaTest ) discard;\",\n  \"    if( useDash == 1. ){\",\n  \"        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\",\n  \"    }\",\n  \"    gl_FragColor = c;\",\n  \"    gl_FragColor.a *= step(vCounters, visibility);\",\n  \"\",\n  THREE.ShaderChunk.fog_fragment,\n  \"}\",\n].join(\"\\n\");\n\nexport class MeshLineMaterial extends THREE.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: {\n        ...THREE.UniformsLib.fog,\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(0xffffff) },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        speed: { value: 0.1 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) },\n        offset: { value: new THREE.Vector2(1, 1) },\n      },\n\n      vertexShader: THREE.ShaderChunk.meshline_vert,\n\n      fragmentShader: THREE.ShaderChunk.meshline_frag,\n    });\n\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(value) {\n          this.uniforms.lineWidth.value = value;\n        },\n      },\n      map: {\n        enumerable: true,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(value) {\n          this.uniforms.map.value = value;\n        },\n      },\n      useMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(value) {\n          this.uniforms.useMap.value = value;\n        },\n      },\n      alphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(value) {\n          this.uniforms.alphaMap.value = value;\n        },\n      },\n      speed: {\n        enumerable: true,\n        get() {\n          return this.uniforms.speed.value;\n        },\n        set(value) {\n          this.uniforms.speed.value = value;\n        },\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        },\n      },\n      color: {\n        enumerable: true,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(value) {\n          this.uniforms.color.value = value;\n        },\n      },\n      opacity: {\n        enumerable: true,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(value) {\n          this.uniforms.opacity.value = value;\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(value) {\n          this.uniforms.resolution.value.copy(value);\n        },\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        },\n      },\n      dashArray: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        },\n      },\n      dashOffset: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(value) {\n          this.uniforms.dashOffset.value = value;\n        },\n      },\n      offset: {\n        enumerable: true,\n        get() {\n          return this.uniforms.offset.value;\n        },\n        set(value) {\n          this.uniforms.offset.value = value;\n        },\n      },\n      dashRatio: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(value) {\n          this.uniforms.dashRatio.value = value;\n        },\n      },\n      useDash: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(value) {\n          this.uniforms.useDash.value = value;\n        },\n      },\n      visibility: {\n        enumerable: true,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(value) {\n          this.uniforms.visibility.value = value;\n        },\n      },\n      alphaTest: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(value) {\n          this.uniforms.alphaTest.value = value;\n        },\n      },\n      repeat: {\n        enumerable: true,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(value) {\n          this.uniforms.repeat.value.copy(value);\n        },\n      },\n    });\n\n    this.setValues(parameters);\n  }\n\n  copy(source) {\n    super.copy(source);\n\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray.copy(source.dashArray);\n    this.dashOffset.copy(source.dashOffset);\n    this.offset.copy(source.offset);\n    this.dashRatio.copy(source.dashRatio);\n    this.useDash = source.useDash;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n\n    return this;\n  }\n}\n","import * as THREE from \"three\";\n// import * as BufferGeometryUtils from \"three/addons/utils/BufferGeometryUtils\";\nimport * as BufferGeometryUtils from \"three/examples/jsm/utils/BufferGeometryUtils.js\";\nimport * as meshline from \"../../../lib/meshline/main\";\nimport * as turf from \"@turf/turf\";\nimport { gisTothree } from \"utils/gisUtils\";\n// 给定一个feature，生成mesh\n// const geo =\n//   '{\"operation\":\"list_building_paths\",\"path\":[[{\"x\":113.31811905,\"y\":23.056722387499974,\"z\":1.5},{\"x\":113.31810834199996,\"y\":23.056742143400015,\"z\":1.5},{\"x\":113.31833318200006,\"y\":23.05678118600008,\"z\":1.5},{\"x\":113.31835460299999,\"y\":23.056662732000063,\"z\":1.5},{\"x\":113.31804410900008,\"y\":23.056623852600126,\"z\":1.5},{\"x\":113.31803339700002,\"y\":23.056702815100095,\"z\":1.5},{\"x\":113.31811905,\"y\":23.056722387499974,\"z\":1.5}],[{\"x\":113.31789418900007,\"y\":23.05698924500001,\"z\":1.5},{\"x\":113.31790490300011,\"y\":23.05688067940008,\"z\":1.5},{\"x\":113.31766935500013,\"y\":23.056861392400037,\"z\":1.5},{\"x\":113.31765864199997,\"y\":23.056960090199993,\"z\":1.5},{\"x\":113.31789418900007,\"y\":23.05698924500001,\"z\":1.5}]],\"type\":\"gis\",\"storeyHeight\":4,\"center\":[113.11639597199996,23.137991950200103],\"gisCenterPos\":[32629567.94276258,17388793.361065175]}';\n// const mygeo = JSON.parse(geo);\nconst WorldRadius = 6378137;\nfunction threeToGis(t) {\n  return [\n    (((180 + t[0]) % 360) / 360) * (2 * Math.PI * WorldRadius),\n    ((180 -\n      (180 / Math.PI) *\n        Math.log(Math.tan(Math.PI / 4 + (t[1] * Math.PI) / 360))) /\n      360) *\n      (2 * Math.PI * WorldRadius),\n  ];\n}\nfunction diffPosition(t, e) {\n  return {\n    x: e[0] - t[0],\n    y: t[1] - e[1],\n  };\n}\n// 统一gis与three坐标\nconst centralPositions = (center, gisCenter, type, paths) => {\n  const pos = [];\n  switch (type) {\n    case \"earth\":\n      break;\n    case \"gis\":\n      for (let n = 0; n < paths.length; n++) {\n        const curPos = paths[n];\n        if (Array.isArray(curPos[0])) {\n          const curPosList = [];\n          for (let i = 0; i < curPos.length; i++) {\n            curPosList.push(\n              curPos[i].map((p) => {\n                const gisPos = threeToGis([p.x, p.y]);\n                const diffPos = diffPosition(gisCenter, gisPos);\n                return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n              }),\n            );\n          }\n          pos.push(curPosList);\n        } else {\n          pos.push(\n            curPos.map((p) => {\n              const gisPos = threeToGis([p.x, p.y]);\n              const diffPos = diffPosition(gisCenter, gisPos);\n              return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n            }),\n          );\n        }\n      }\n      break;\n    case \"normal\":\n      for (let n = 0; n < paths.length; n++) {\n        const curPos = paths[n];\n        if (Array.isArray(curPos[0])) {\n          const curPosList = [];\n          for (let i = 0; i < curPos.length; i++) {\n            curPosList.push(\n              curPos[i].map((p) => {\n                const diffPos = diffPosition(center, [p.x, p.y]);\n                return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n              }),\n            );\n          }\n          pos.push(curPosList);\n        } else {\n          pos.push(\n            curPos.map((p) => {\n              const diffPos = diffPosition(center, [p.x, p.y]);\n              return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n            }),\n          );\n        }\n      }\n      break;\n    default:\n      console.warn(\"no such type in engine\".concat(type));\n      break;\n  }\n  return pos;\n};\n// 处理line数据\nconst formateLineData = (paths) => {\n  let pos = [];\n  for (let i = 0; i < paths.length; i++) {\n    const type = paths[i].geometry && paths[i].geometry.type;\n    if (\"MultiLineString\" === type) {\n      const coordinates = paths[i].geometry.coordinates;\n      for (let n = 0; n < coordinates.length; n++) {\n        const coordinate = coordinates[n];\n        if (1 === coordinate.length) {\n          const coor = coordinate[0];\n          const list = [];\n          for (const j = 0, len = coor.length; j < len; j++) {\n            list.push(new THREE.Vector3(coor[j][0], coor[j][1], 0));\n          }\n          pos.push(list);\n        } else {\n          const list = [];\n          for (let j = 0, len = coordinate.length; j < len; j++) {\n            const coor1 = coordinate[j];\n            list.push(new THREE.Vector3(coor1[0], coor1[1], 0));\n          }\n          pos.push(list);\n        }\n      }\n    } else if (\"LineString\" === type) {\n      const coordinates = paths[i].geometry.coordinates;\n      if (1 === coordinates.length) {\n        const coors = coordinates[0];\n        const list = [];\n        for (let j = 0; j < coors.length; j++) {\n          list.push(new THREE.Vector3(coors[j][0], coors[j][1], 0));\n        }\n        pos.push(list);\n      } else {\n        const list = [];\n        for (let z = 0; z < coordinates.length; z++) {\n          const coors = coordinates[z];\n          list.push(new THREE.Vector3(coors[0], coors[1], 0));\n        }\n        pos.push(list);\n      }\n    } else if (!type) {\n      let coordinates = paths[i];\n      for (let j = 0; j < coordinates.length; j++) {\n        let list = [];\n        for (let coors = coordinates[j], m = 0; m < coors.length; m++) {\n          list.push(coors[m]);\n        }\n        pos.push(list);\n      }\n    }\n  }\n  return pos;\n};\n// 统一线数据转成threePos\nconst uniteGisPosition = (center, gisCenter, type, paths) => {\n  const pos = [];\n  switch (type) {\n    case \"earth\":\n      break;\n    case \"gis\":\n      for (let n = 0; n < paths.length; n++) {\n        const curPos = paths[n];\n        const curPosList = [];\n        if (Array.isArray(curPos[0])) {\n          for (let i = 0; i < curPos.length; i++) {\n            curPosList.push(\n              curPos[i].map((p) => {\n                const gisPos = threeToGis([p.x, p.y]);\n                const diffPos = diffPosition(gisCenter, gisPos);\n                return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n              }),\n            );\n          }\n          pos.push(curPosList);\n        } else {\n          curPosList.push(\n            ...curPos.map((p) => {\n              const gisPos = threeToGis([p.x, p.y]);\n              const diffPos = diffPosition(gisCenter, gisPos);\n              return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n            }),\n          );\n          pos.push(curPosList);\n        }\n      }\n      break;\n    case \"normal\":\n      for (let n = 0; n < paths.length; n++) {\n        const curPos = paths[n];\n        const curPosList = [];\n        if (Array.isArray(curPos[0])) {\n          for (let i = 0; i < curPos.length; i++) {\n            curPosList.push(\n              curPos[i].map((p) => {\n                const diffPos = diffPosition(center, [p.x, p.y]);\n                return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n              }),\n            );\n          }\n          pos.push(curPosList);\n        } else {\n          curPosList.push(\n            curPos.map((p) => {\n              const diffPos = diffPosition(center, [p.x, p.y]);\n              return new THREE.Vector3(diffPos.x, diffPos.y, p.z);\n            }),\n          );\n          pos.push(curPosList);\n        }\n      }\n      break;\n    default:\n      console.warn(\"no such type in engine\".concat(type));\n      break;\n  }\n  return pos;\n};\n\nclass GeoUtil {\n  generateBuilding(data) {\n    var { path, type, center, storeyHeight, gisCenterPos } = data;\n    let paths = [];\n    switch (type) {\n      case \"earth\":\n        console.log(r);\n        break;\n      case \"gis\":\n        for (var p = 0; p < path.length; p++) {\n          var threeArray = path[p].map(function (t) {\n            let pos = threeToGis([t.x, t.y]);\n            const diffPos = diffPosition(gisCenterPos, pos);\n            return new THREE.Vector3(diffPos.x, diffPos.y, t.z * storeyHeight);\n          });\n          paths.push(threeArray);\n        }\n        break;\n      case \"normal\":\n        for (var i = 0; i < path.length; i++) {\n          var threeArray = path[i].map(function (t) {\n            var e = diffPosition(gisCenterPos, [t.x, t.y]);\n            return new THREE.Vector3(e.x, e.y, t.z * storeyHeight);\n          });\n          paths.push(threeArray);\n        }\n        break;\n      default:\n        console.log(\"wrong viewer type: \".concat(a));\n    }\n\n    const posArray = [];\n    const uvsArray = [];\n    const uvs2Array = [];\n    for (var i = 0; i < paths.length; i++) {\n      // joinLonLat\n      const positionsV = paths[i];\n      let joinLonLat = [];\n      for (var j = 0; j < positionsV.length; j++) {\n        joinLonLat.push(positionsV[j].x, positionsV[j].y);\n      }\n\n      // 计算周长长度\n      const polySub = [];\n      for (let a = joinLonLat, o = 0, s = 0; o < a.length - 2; o += 2, s += 1)\n        o === 0\n          ? (polySub[0] = Math.sqrt(\n              (a[2] - a[0]) * (a[2] - a[0]) + (a[3] - a[1]) * (a[3] - a[1]),\n            ))\n          : (polySub[s] =\n              polySub[s - 1] +\n              Math.sqrt(\n                (a[o + 2] - a[o]) * (a[o + 2] - a[o]) +\n                  (a[o + 3] - a[o + 1]) * (a[o + 3] - a[o + 1]),\n              ));\n\n      const pos = [];\n      const uvs = [];\n      const uvs2 = [];\n      const polylenth = polySub[polySub.length - 1];\n      for (\n        let d = 0,\n          u = pos.length,\n          mHeight = 20 * storeyHeight,\n          p = uvs.length,\n          k = uvs2.length;\n        d < positionsV.length;\n        d += 1\n      ) {\n        const pv1 = positionsV[d];\n        const pv2 =\n          d === positionsV.length - 1 ? positionsV[0] : positionsV[d + 1];\n        const polyPice = polySub[d];\n        (pos[u++] = pv1.x),\n          (pos[u++] = pv1.y),\n          (pos[u++] = 0),\n          (uvs[p++] = d === 0 ? 0 : polySub[d - 1] / polylenth),\n          (uvs[p++] = 0),\n          (uvs2[k++] = positionsV.length - 1),\n          (uvs2[k++] = pv1.z / mHeight);\n\n        (pos[u++] = pv1.x),\n          (pos[u++] = pv1.y),\n          (pos[u++] = pv1.z),\n          (uvs[p++] = d === 0 ? 0 : polySub[d - 1] / polylenth),\n          (uvs[p++] = pv1.z / mHeight),\n          (uvs2[k++] = positionsV.length - 1),\n          (uvs2[k++] = pv1.z / mHeight);\n\n        (pos[u++] = pv2.x),\n          (pos[u++] = pv2.y),\n          (pos[u++] = pv2.z),\n          (uvs[p++] = polyPice / polylenth),\n          (uvs[p++] = pv2.z / mHeight),\n          (uvs2[k++] = positionsV.length - 1),\n          (uvs2[k++] = pv2.z / mHeight);\n\n        (pos[u++] = pv2.x),\n          (pos[u++] = pv2.y),\n          (pos[u++] = 0),\n          (uvs[p++] = polyPice / polylenth),\n          (uvs[p++] = 0),\n          (uvs2[k++] = positionsV.length - 1),\n          (uvs2[k++] = pv1.z / mHeight);\n\n        (pos[u++] = pv1.x),\n          (pos[u++] = pv1.y),\n          (pos[u++] = 0),\n          (uvs[p++] = d === 0 ? 0 : polySub[d - 1] / polylenth),\n          (uvs[p++] = 0),\n          (uvs2[k++] = paths.length - 1),\n          (uvs2[k++] = pv1.z / mHeight);\n\n        (pos[u++] = pv2.x),\n          (pos[u++] = pv2.y),\n          (pos[u++] = pv2.z),\n          (uvs[p++] = polyPice / polylenth),\n          (uvs[p++] = pv2.z / mHeight);\n        (uvs2[k++] = positionsV.length - 1), (uvs2[k++] = pv2.z / mHeight);\n      }\n      posArray.push(pos);\n      uvsArray.push(uvs);\n      uvs2Array.push(uvs2);\n    }\n\n    // 合并顶面\n    let geometryList = [];\n    for (let i = 0; i < paths.length; i++) {\n      let shapeCoords = paths[i];\n      let mesh = new THREE.Mesh(\n        new THREE.ShapeGeometry(new THREE.Shape(shapeCoords)),\n        new THREE.MeshBasicMaterial({\n          color: 16777215,\n        }),\n      );\n      mesh.position.z = shapeCoords[0].z;\n      mesh.updateMatrixWorld(),\n        mesh.geometry.applyMatrix4(mesh.matrixWorld),\n        mesh.updateMatrix(),\n        geometryList.push(mesh);\n    }\n    let topGeometryMerged = BufferGeometryUtils.mergeGeometries(\n      geometryList.map((g) => g.geometry),\n    );\n    const topUV = topGeometryMerged.getAttribute(\"uv\").array;\n    const topPosition = topGeometryMerged.getAttribute(\"position\").array;\n    const topIndex = topGeometryMerged.getIndex().array;\n    geometryList.forEach((H) => {\n      H.geometry.dispose(), H.material.dispose();\n    });\n\n    // 侧面合并\n    geometryList = [];\n    for (let i = 0; i < posArray.length; i++) {\n      let geometry = new THREE.BufferGeometry();\n      geometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(new Float32Array(posArray[i]), 3),\n      );\n      geometry.setAttribute(\n        \"uv\",\n        new THREE.BufferAttribute(new Float32Array(uvsArray[i]), 2),\n      );\n      geometry.setAttribute(\n        \"uv2\",\n        new THREE.BufferAttribute(new Float32Array(uvs2Array[i]), 2),\n      );\n      let mesh = new THREE.Mesh(\n        geometry,\n        new THREE.MeshBasicMaterial({\n          color: 16777215,\n        }),\n      );\n      mesh.updateMatrix();\n      geometryList.push(mesh);\n    }\n    let sideGeometryMerged = BufferGeometryUtils.mergeGeometries(\n      geometryList.map((g) => g.geometry),\n    );\n    sideGeometryMerged.computeVertexNormals();\n    const sideNormal = sideGeometryMerged.getAttribute(\"normal\").array;\n    const sidePosition = sideGeometryMerged.getAttribute(\"position\").array;\n    const sideUV = sideGeometryMerged.getAttribute(\"uv\").array;\n    const sideUV2 = sideGeometryMerged.getAttribute(\"uv2\").array;\n    // const sideIndex = sideGeometryMerged.getIndex().array;\n    geometryList.forEach((H) => {\n      H.geometry.dispose(), H.material.dispose();\n    });\n    geometryList = null;\n\n    return {\n      sideNormal,\n      sidePosition,\n      sideUV,\n      sideUV2,\n      // sideIndex,\n      topUV,\n      topPosition,\n      topIndex,\n    };\n  }\n\n  generateAttributes(data) {\n    var s = THREE.Vector3,\n      xt = THREE.BufferGeometry,\n      Ie = THREE.Mesh,\n      te = THREE.MeshBasicMaterial,\n      di = THREE.ShapeGeometry,\n      ji = THREE.Shape,\n      Vt = THREE.BufferAttribute,\n      Qt = THREE.BufferGeometry;\n    var n = 6378137;\n\n    function o(t, e) {\n      return {\n        x: e[0] - t[0],\n        y: t[1] - e[1],\n      };\n    }\n    function t(t) {\n      for (\n        ;\n        t.some(function (t) {\n          return Array.isArray(t);\n        });\n\n      )\n        t = [].concat.apply([], t);\n      return t;\n    }\n\n    var i = data,\n      r = i.path,\n      a = i.type,\n      h = i.center,\n      u = i.storeyHeight,\n      c = i.gisCenterPos,\n      l = [];\n    switch (a) {\n      case \"earth\":\n        console.log(r);\n        break;\n      case \"gis\":\n        for (var p = 0; p < r.length; p++) {\n          var f;\n          (f = r[p].map(function (t) {\n            var e,\n              i = [\n                (((180 + (e = [t.x, t.y])[0]) % 360) / 360) * (2 * Math.PI * n),\n                ((180 -\n                  (180 / Math.PI) *\n                    Math.log(Math.tan(Math.PI / 4 + (e[1] * Math.PI) / 360))) /\n                  360) *\n                  (2 * Math.PI * n),\n              ],\n              r = o(c, i);\n            return new s(r.x, r.y, t.z * u);\n          })),\n            l.push(f);\n        }\n        break;\n      case \"normal\":\n        for (var y = 0; y < r.length; y++) {\n          var d;\n          (d = r[y].map(function (t) {\n            var e = o(h, [t.x, t.y]);\n            return new s(e.x, e.y, t.z * u);\n          })),\n            l.push(d);\n        }\n        break;\n      default:\n        console.log(\"wrong viewer type: \".concat(a));\n    }\n    for (var m = [], v = [], x = [], g = 0; g < l.length; g++) {\n      for (var b = l[g], w = [], M = 0; M < b.length; M++) {\n        var z = b[M];\n        w.push([z.x, z.y]);\n      }\n      for (var S = t(w), A = [], _ = 0, N = 0; _ < S.length - 2; _ += 2, N++)\n        0 === _\n          ? (A[0] = Math.sqrt(\n              (S[2] - S[0]) * (S[2] - S[0]) + (S[3] - S[1]) * (S[3] - S[1]),\n            ))\n          : (A[N] =\n              A[N - 1] +\n              Math.sqrt(\n                (S[_ + 2] - S[_]) * (S[_ + 2] - S[_]) +\n                  (S[_ + 3] - S[_ + 1]) * (S[_ + 3] - S[_ + 1]),\n              ));\n      for (\n        var T = [],\n          O = [],\n          k = [],\n          E = A[A.length - 1],\n          C = 20 * u,\n          V = 0,\n          P = T.length,\n          B = O.length,\n          R = k.length;\n        V < b.length;\n        V++\n      ) {\n        var U = b[V],\n          F = b[V + 1];\n        V === b.length - 1 && (F = b[0]);\n        var q = A[V];\n        (T[P++] = U.x),\n          (T[P++] = U.y),\n          (T[P++] = 0),\n          (O[B++] = 0 === V ? 0 : A[V - 1] / E),\n          (O[B++] = 0),\n          (k[R++] = b.length - 1),\n          (k[R++] = U.z / C),\n          (T[P++] = U.x),\n          (T[P++] = U.y),\n          (T[P++] = U.z),\n          (O[B++] = 0 === V ? 0 : A[V - 1] / E),\n          (O[B++] = U.z / C),\n          (k[R++] = b.length - 1),\n          (k[R++] = U.z / C),\n          (T[P++] = F.x),\n          (T[P++] = F.y),\n          (T[P++] = F.z),\n          (O[B++] = q / E),\n          (O[B++] = F.z / C),\n          (k[R++] = b.length - 1),\n          (k[R++] = F.z / C),\n          (T[P++] = F.x),\n          (T[P++] = F.y),\n          (T[P++] = 0),\n          (O[B++] = q / E),\n          (O[B++] = 0),\n          (k[R++] = b.length - 1),\n          (k[R++] = U.z / C),\n          (T[P++] = U.x),\n          (T[P++] = U.y),\n          (T[P++] = 0),\n          (O[B++] = 0 === V ? 0 : A[V - 1] / E),\n          (O[B++] = 0),\n          (k[R++] = b.length - 1),\n          (k[R++] = U.z / C),\n          (T[P++] = F.x),\n          (T[P++] = F.y),\n          (T[P++] = F.z),\n          (O[B++] = q / E),\n          (O[B++] = F.z / C),\n          (k[R++] = b.length - 1),\n          (k[R++] = F.z / C);\n      }\n      m.push(T), v.push(O), x.push(k);\n    }\n    let geometryList = [];\n    for (var j = new xt(), I = 0; I < l.length; I++) {\n      var L = l[I];\n      var H = new Ie(\n        new di(new ji(L)),\n        new THREE.MeshBasicMaterial({\n          color: 16777215,\n        }),\n      );\n      (H.position.z = L[0].z),\n        H.updateMatrixWorld(),\n        H.geometry.applyMatrix4(H.matrixWorld),\n        H.updateMatrix(),\n        geometryList.push(H);\n    }\n    j = BufferGeometryUtils.mergeGeometries(\n      geometryList.map((g) => g.geometry),\n    );\n    geometryList.forEach((H) => {\n      H.geometry.dispose(), H.material.dispose();\n    });\n    geometryList = [];\n    for (\n      var D = j,\n        Z = D.attributes.position.array,\n        J = D.attributes.uv.array,\n        topIndex = D.index.array,\n        W = null,\n        G = 0;\n      G < m.length;\n      G++\n    ) {\n      var X = new Qt();\n      X.setAttribute(\"position\", new Vt(new Float32Array(m[G]), 3)),\n        X.setAttribute(\"uv\", new Vt(new Float32Array(v[G]), 2)),\n        X.setAttribute(\"uv2\", new Vt(new Float32Array(x[G]), 2));\n      var Y = new Ie(\n        X,\n        new te({\n          color: 16777215,\n        }),\n      );\n      Y.updateMatrix(), geometryList.push(Y);\n    }\n    W = BufferGeometryUtils.mergeGeometries(\n      geometryList.map((g) => {\n        return g.geometry;\n      }),\n    );\n    geometryList.forEach((H) => {\n      H.geometry.dispose(), H.material.dispose();\n    });\n    W.computeVertexNormals();\n    var $ = W,\n      K = $.attributes.position.array,\n      tt = $.attributes.uv.array,\n      et = $.attributes.uv2.array,\n      it = $.attributes.normal.array;\n    return {\n      positions: K,\n      uvs2: et,\n      uvs: tt,\n      topPositions: Z,\n      topUvs: J,\n      topIndex: topIndex,\n      normals: it,\n    };\n  }\n\n  generateWaterAttr(data) {\n    // 处理数据\n    const filterPositions = (paths) => {\n      let pos = [];\n      for (let i = 0; i < paths.length; i++) {\n        const type = paths[i].geometry && paths[i].geometry.type;\n        if (\"MultiPolygon\" === type) {\n          const coordinates = paths[i].geometry.coordinates;\n          for (let n = 0; n < coordinates.length; n++) {\n            const coordinate = coordinates[n];\n            if (1 === coordinate.length) {\n              const coor = coordinate[0];\n              const list = [];\n              for (let j = 0, len = coor.length; j < len; j++) {\n                list.push(new THREE.Vector3(coor[j][0], coor[j][1], 0));\n              }\n              pos.push(list);\n            } else {\n              const list = [];\n              for (let j = 0, len = coordinate.length; j < len; j++) {\n                const list1 = [];\n                const coor1 = coordinate[j];\n                for (let m = 0, len1 = coor1.length; m < len1; m++) {\n                  list1.push(new THREE.Vector3(coor1[m][0], coor1[m][1], 0));\n                }\n                list.push(list1);\n              }\n              pos.push(list);\n            }\n          }\n        } else if (\"Polygon\" === type) {\n          const coordinates = paths[i].geometry.coordinates;\n          if (1 === coordinates.length) {\n            const coors = coordinates[0];\n            const list = [];\n            for (let j = 0; j < coors.length; j++) {\n              list.push(new THREE.Vector3(coors[j][0], coors[j][1], 0));\n            }\n            pos.push(list);\n          } else {\n            const list = [];\n            for (let z = 0; z < coordinates.length; z++) {\n              const list1 = [];\n              const coors = coordinates[z];\n              for (let j = 0; j < coors.length; j++) {\n                list1.push(new THREE.Vector3(coors[j][0], coors[j][1], 0));\n              }\n              list.push(list1);\n            }\n            pos.push(list);\n          }\n        } else if (!type) {\n          let coordinates = paths[i];\n          for (let j = 0; j < coordinates.length; j++) {\n            let list = [];\n            for (let coors = coordinates[j], m = 0; m < coors.length; m++) {\n              list.push(coors[m]);\n            }\n            pos.push(list);\n          }\n        }\n      }\n      return pos;\n    };\n    const { center, gisCenterPos, type, path } = data;\n    const filterpaths = filterPositions(path);\n    const positions = centralPositions(center, gisCenterPos, type, filterpaths);\n    const bgList = [];\n    let bufferGeometry = null;\n    for (let a = 0; a < positions.length; a++) {\n      if (Array.isArray(positions[a][0])) {\n        let polygon = null;\n        for (let u = 0; u < positions[a].length; u++) {\n          if (0 === u) {\n            polygon = new THREE.Shape(positions[a][u]);\n          } else {\n            polygon.holes.push(new THREE.Path(positions[a][u]));\n          }\n        }\n        const mesh = new THREE.Mesh(\n          new THREE.ShapeGeometry(polygon),\n          new THREE.MeshBasicMaterial(),\n        );\n        mesh.updateMatrix();\n        bgList.push(mesh);\n      } else {\n        const mesh = new THREE.Mesh(\n          new THREE.ShapeGeometry(new THREE.Shape(positions[a])),\n          new THREE.MeshBasicMaterial(),\n        );\n        mesh.updateMatrix();\n        bgList.push(mesh);\n      }\n    }\n\n    bufferGeometry = BufferGeometryUtils.mergeGeometries(\n      bgList.map((g) => g.geometry),\n    );\n    bgList.forEach((g) => {\n      g.geometry.dispose();\n      g.material.dispose();\n      g = null;\n    });\n\n    bufferGeometry.computeBoundingBox();\n\n    function _calculateUVCoordinates(geometry) {\n      const min = new THREE.Vector3();\n      const max = new THREE.Vector3();\n      geometry.computeBoundingBox();\n      min.copy(geometry.boundingBox.min);\n      max.copy(geometry.boundingBox.max);\n\n      const range = new THREE.Vector3();\n      range.subVectors(max, min);\n\n      const uv = [];\n      const positions = geometry.attributes.position.array;\n      for (let i = 0; i < positions.length; i += 3) {\n        const relativePos = new THREE.Vector3()\n          .fromArray([positions[i], positions[i + 1], positions[i + 2]])\n          .sub(min)\n          .divide(range);\n        const u = relativePos.x;\n        const v = relativePos.y;\n        uv.push(u, v);\n      }\n\n      geometry.setAttribute(\n        \"uv\",\n        new THREE.BufferAttribute(new Float32Array(uv), 2),\n      );\n    }\n    _calculateUVCoordinates(bufferGeometry);\n    // const boundingBox = bufferGeometry.boundingBox;\n    // const bmax = boundingBox.max;\n    // const bmin = boundingBox.min;\n    // const v1 = new THREE.Vector2(0 - bmin.x, 0 - bmin.y);\n    // const v2 = new THREE.Vector2(bmax.x - bmin.x, bmax.y - bmin.y);\n\n    const indexAttribute = bufferGeometry.index;\n    const positionAttribute = bufferGeometry.getAttribute(\"position\");\n\n    // const uvs = [];\n    // const uvsArray = new Float32Array(positionAttribute.count * 2);\n    // for (let i = 0; i < positionAttribute.count; i++) {\n    //   const aPosition = new THREE.Vector3().fromBufferAttribute(\n    //     positionAttribute,\n    //     i,\n    //   );\n    //   const uvA = new THREE.Vector2(\n    //     (aPosition.x + v1.x) / v2.x,\n    //     (aPosition.y + v1.y) / v2.y,\n    //   );\n    //   uvs.push(uvA);\n    //   uvsArray[i * 2] = uvA.x;\n    //   uvsArray[i * 2 + 1] = uvA.y;\n    // }\n\n    const positionArray = positionAttribute.array;\n    const indexs = indexAttribute.array;\n    const uvsArray = bufferGeometry.getAttribute(\"uv\").array;\n    const normalsArray = bufferGeometry.getAttribute(\"normal\").array;\n    bufferGeometry.dispose();\n    // 返回数据\n    return {\n      positions: positionArray,\n      uvs: uvsArray,\n      index: indexs,\n      normal: normalsArray,\n    };\n  }\n\n  generateTerrain(data) {\n    const { points, type, center, gisCenterPos } = data;\n    // 处理成point-geojson格式\n    var rPoints = [],\n      minHeight = 1 / 0,\n      maxHeight = -1 / 0;\n    points.forEach((point) => {\n      let coords = [],\n        height = 0;\n      if (Array.isArray(point)) {\n        coords = [point[0], point[1]];\n        height = point[2];\n      } else {\n        coords = point.lngLat || point.xy || point._lngLat || point._xy;\n        height = point.height || point.z || point.h;\n      }\n      if (void 0 !== height && coords) {\n        minHeight = Math.min(minHeight, height);\n        maxHeight = Math.max(maxHeight, height);\n        rPoints.push({\n          geometry: {\n            coordinates: coords,\n            type: \"Point\",\n          },\n          properties: {\n            z: height,\n          },\n        });\n      }\n    });\n\n    // points 坐标转换到three坐标\n    let coordSet = {},\n      threePositions = [],\n      heightArray = [];\n    for (let y = 0, pLen = rPoints.length; y < pLen; y++) {\n      let point = rPoints[y],\n        geometry = point.geometry,\n        properties = point.properties,\n        coord = geometry.coordinates;\n      coordSet[coord.toString()] = y;\n      var height = properties.z;\n      var threePos = null;\n      switch (type) {\n        case \"earth\":\n          console.log(point);\n          break;\n        case \"gis\":\n          threePos = diffPosition(gisCenterPos, [\n            (((180 + coord[0]) % 360) / 360) * (2 * Math.PI * WorldRadius),\n            ((180 -\n              (180 / Math.PI) *\n                Math.log(Math.tan(Math.PI / 4 + (coord[1] * Math.PI) / 360))) /\n              360) *\n              (2 * Math.PI * WorldRadius),\n          ]);\n          break;\n        case \"normal\":\n          threePos = diffPosition(center, point);\n          break;\n        default:\n          console.warn(\"no such viewer type in engine: \".concat(type));\n      }\n      threePositions.push(threePos.x, threePos.y, height),\n        heightArray.push(height);\n    }\n\n    var feature = {\n      result: {\n        type: \"FeatureCollection\",\n        features: [],\n      },\n      faces: [],\n    };\n    if (rPoints && Array.isArray(rPoints)) {\n      var P = turf.featureCollection(points.map((a) => turf.point(a)));\n      (feature.result = turf.tin(P)), console.log(feature.result);\n    }\n\n    var features = feature.result.features,\n      coordArray = [];\n    if (features.length > 0)\n      for (var i = 0, N = features.length; i < N; i++)\n        for (\n          var coords = features[i].geometry.coordinates[0],\n            j = 0,\n            len = coords.length;\n          j < len - 1;\n          j++\n        ) {\n          var coord = coordSet[coords[j].slice(0, 2).toString()];\n          coordArray.push(coord);\n        }\n\n    var heights = [];\n    for (var G = 0, len = coordArray.length; G < len; G += 3) {\n      var V = coordArray[G],\n        k = coordArray[G + 1],\n        j = coordArray[G + 2];\n      (heightArray[V] > minHeight ||\n        heightArray[k] > minHeight ||\n        heightArray[j] > minHeight) &&\n        heights.push(V, k, j);\n    }\n    var bufferGeometry = new THREE.BufferGeometry();\n    bufferGeometry.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(new Float32Array(threePositions), 3),\n    );\n    bufferGeometry.setIndex(\n      new THREE.BufferAttribute(new Uint32Array(heights), 1),\n    );\n    bufferGeometry.computeVertexNormals();\n\n    return {\n      positions: bufferGeometry.attributes.position.array,\n      normal: bufferGeometry.attributes.normal.array,\n      index: bufferGeometry.getIndex().array,\n      maxHeight,\n      minHeight,\n    };\n  }\n\n  generateRoadAttr(data) {\n    const { center, gisCenterPos, type, path } = data;\n\n    let centerPt = turf.center(path);\n    const gisPos = threeToGis(centerPt.geometry.coordinates);\n    centerPt = diffPosition(gisCenterPos, gisPos);\n\n    // centerPt = gisTothree(centerPt.geometry.coordinates)\n    console.log(centerPt);\n    let paths = formateLineData(path.features);\n    let positions = uniteGisPosition(center, gisCenterPos, type, paths);\n    positions = positions.map((path) => path.map((v) => v.sub(centerPt)));\n\n    // mergeLine\n    const createMeshline = (lines) => {\n      const geometry = new THREE.BufferGeometry();\n      geometry.setFromPoints(lines);\n      const meshLine = new meshline.MeshLine();\n      meshLine.setGeometry(geometry);\n      return meshLine;\n    };\n    let meshes = positions.map((path) => createMeshline(path));\n    const bufferGeometry = BufferGeometryUtils.mergeGeometries(\n      meshes.map((g) => g),\n    );\n    meshes.forEach((mesh) => {\n      mesh.dispose();\n      mesh = null;\n    });\n    meshes = null;\n\n    return {\n      counters: bufferGeometry.getAttribute(\"counters\").array,\n      next: bufferGeometry.getAttribute(\"next\").array,\n      position: bufferGeometry.getAttribute(\"position\").array,\n      previous: bufferGeometry.getAttribute(\"previous\").array,\n      side: bufferGeometry.getAttribute(\"side\").array,\n      uv: bufferGeometry.getAttribute(\"uv\").array,\n      index: bufferGeometry.getIndex().array,\n      width: bufferGeometry.getAttribute(\"width\").array,\n      center: centerPt,\n    };\n  }\n}\n\nexport default new GeoUtil();\n","import geoUtil from \"../utils/geoUtil.js\";\nself.addEventListener(\"message\", (event) => {\n  const { type, data } = event.data;\n  const handlers = {\n    generateBuilding: (data) => {\n      return geoUtil.generateBuilding(data);\n    },\n    generateWater: (data) => {\n      return geoUtil.generateWaterAttr(data);\n    },\n    generateTerrain: (data) => {\n      return geoUtil.generateTerrain(data);\n    },\n    generateRoadAttr: (data) => {\n      return geoUtil.generateRoadAttr(data);\n    },\n  };\n  const result = handlers[type] && handlers[type](data);\n  postMessage(result);\n  close();\n  return;\n});\n"],"names":["MeshLineRaycast","raycaster","intersects","inverseMatrix","THREE","ray","sphere","interRay","geometry","this","copy","boundingSphere","applyMatrix4","matrixWorld","intersectSphere","getInverse","vStart","vEnd","interSegment","step","index","attributes","indices","array","positions","position","widths","width","i","l","length","a","b","fromArray","undefined","Math","floor","precision","params","Line","threshold","material","lineWidth","precisionSq","distanceSqToSegment","distance","origin","distanceTo","near","far","push","point","clone","face","faceIndex","object","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","set","MeshLine","_THREE$BufferGeometry","_inherits","_super","_createSuper","_this","_classCallCheck","call","type","isMeshLine","raycast","previous","next","side","indices_array","uvs","counters","_points","_geom","widthCallback","Object","defineProperties","_assertThisInitialized","enumerable","get","geom","value","setGeometry","points","setPoints","_createClass","key","g","c","_geometry","getAttribute","wcb","j","p","x","y","z","process","aa","ab","w","v","compareV3","copyV3","n","_attributes","count","copyArray","Float32Array","needsUpdate","uv","Uint16Array","setAttribute","setIndex","computeBoundingSphere","computeBoundingBox","_ref","utils","meshline_vert","logdepthbuf_pars_vertex","fog_pars_vertex","logdepthbuf_vertex","fog_vertex","join","meshline_frag","fog_pars_fragment","logdepthbuf_pars_fragment","logdepthbuf_fragment","fog_fragment","WorldRadius","threeToGis","t","PI","log","tan","diffPosition","e","GeoUtil","data","path","storeyHeight","center","gisCenterPos","paths","console","r","threeArray","map","pos","diffPos","concat","posArray","uvsArray","uvs2Array","positionsV","joinLonLat","polySub","o","s","sqrt","uvs2","polylenth","d","u","mHeight","k","pv1","pv2","polyPice","geometryList","shapeCoords","mesh","color","updateMatrixWorld","updateMatrix","topGeometryMerged","BufferGeometryUtils","topUV","topPosition","topIndex","getIndex","forEach","H","dispose","sideGeometryMerged","computeVertexNormals","sideNormal","sidePosition","sideUV","sideUV2","xt","Ie","te","di","ji","Vt","Qt","some","Array","isArray","apply","h","f","m","M","S","A","_","N","T","O","E","C","V","P","B","R","U","F","q","I","L","D","Z","J","W","G","X","Y","$","K","tt","uv2","topPositions","topUvs","normals","normal","gisCenter","curPos","curPosList","gisPos","warn","centralPositions","coordinates","coordinate","coor","list","len","list1","coor1","len1","coors","filterPositions","bgList","bufferGeometry","polygon","holes","min","max","boundingBox","range","subVectors","relativePos","sub","divide","_calculateUVCoordinates","indexAttribute","positionArray","indexs","normalsArray","rPoints","minHeight","maxHeight","coords","height","lngLat","xy","_lngLat","_xy","properties","coordSet","threePositions","heightArray","pLen","coord","toString","threePos","feature","result","features","faces","turf","coordArray","heights","Uint32Array","centerPt","_readOnlyError","formateLineData","_toConsumableArray","uniteGisPosition","meshes","lines","setFromPoints","meshLine","meshline","createMeshline","self","addEventListener","event","_event$data","handlers","generateBuilding","geoUtil","generateWater","generateWaterAttr","generateTerrain","generateRoadAttr","postMessage","close"],"sourceRoot":""}